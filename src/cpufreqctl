#!/bin/bash -e

# cpufreqctl - This script can configure the pstate driver of your intel CPU.
#
# Copyright (C) 2015-2017
#     Martin Koppehel <psl.kontakt@gmail.com>,
#     Fin Christensen <christensen.fin@gmail.com>,
#
# This file is part of the gnome-shell extension cpupower.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

function log {
    echo "$@" >&2 || true
}

function err {
    show_usage
    echo "error: $@" >&2 && false
}

function show_usage {
    log "usage: cpufreqctl [-h] [turbo {get,0,1}] [min {get,check,VALUE}] [max {get,VALUE}]"
}

function show_help {
    log "usage: cpufreqctl [-h] ACTION PARAMETER"
    log
    log "This script can configure the pstate driver of your intel CPU."

    help_arguments
    help_actions
    help_turbo
    help_min
    help_max
    help_examples
    help_copyright
    exit
}

function help_arguments {
    log
    log "optional arguments:"
    log "    -h, --help   show this help message and exit"
}

function help_actions {
    log
    log "available actions:"
    log "    turbo        control or read the turbo boost state of your cpu"
    log "    min          get or set the minimum cpu frequency (in %, [0;100])"
    log "                 or get the smallest allowed value"
    log "    max          get or set the maximum cpu frequency (in %, [0;100])"
}

function help_turbo {
    log
    log "turbo parameters:"
    log "    get          get the current turbo boost state"
    log "    0            turn turbo boost off"
    log "    1            turn turbo boost on"
}

function help_min {
    log
    log "min parameters:"
    log "    get          get the current set minimum frequency (in %, [0;100])"
    log "    check        get the smallest allowed minimum frequency for your cpu model"
    log "    VALUE        set the current minimum frequency to a value in [0;100]"
    log "                 the values is automatically clamped to the minimum allowed cpu"
    log "                 frequency"
}

function help_max {
    log
    log "max parameters:"
    log "    get          get the current set maximum frequency (in %, [0;100])"
    log "    VALUE        set the current maximum frequency to a value in [0;100]"
}

function help_examples {
    log
    log "examples:"
    log "    set the maximum frequency to 50%"
    log "        cpufreqctl max 50"
    log "    get the turbo boost state"
    log "        cpufreqctl turbo get"
    log "    get smallest allowed minimum cpu frequency for your model"
    log "        cpufreqctl min check"
}

function help_copyright {
    log
    log "cpufreqctl  Copyright (c) 2017-$(date '+%Y') Martin Koppehel, Fin Christensen"
}

if [ $# -lt 1 ]; then
    err "you must specify an action!"
fi

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    show_help
fi

if [[ $EUID -ne 0 ]]; then
    err "This script must be run as root!"
fi

case "$1" in
"turbo")
    if [ -z "$2" ]; then
        log "usage: cpufreqctl turbo {get,0,1}"
        help_turbo
        help_copyright
    elif [ "$2" = "get" ]; then
        cat /sys/devices/system/cpu/intel_pstate/no_turbo
    elif [ "$2" -lt 0 ] || [ "$2" -gt 1 ]; then
        log "usage: cpufreqctl turbo {get,0,1}"
        err "VALUE must be 0 or 1"
    else
        if [ "$2" -eq 1 ]; then
            policy="performance"
            echo 0 > /sys/devices/system/cpu/intel_pstate/no_turbo
        elif [ "$2" -eq 0 ]; then
            policy="powersave"
            echo 1 > /sys/devices/system/cpu/intel_pstate/no_turbo
        fi

        for governor in /sys/devices/system/cpu/cpufreq/policy*/scaling_governor
        do
            echo "$policy" > "$governor"
        done
    fi
    ;;
"max")
    if [ -z "$2" ]; then
        log "usage: cpufreqctl max {get,VALUE}"
        help_max
        help_copyright
    elif [ "$2" = "get" ]; then
        cat /sys/devices/system/cpu/intel_pstate/max_perf_pct
    elif [ "$2" -lt 0 ] || [ "$2" -gt 100 ]; then
        log "usage: cpufreqctl max {get,VALUE}"
        err "VALUE must be between 0 and 100"
    else
        echo "$2" > /sys/devices/system/cpu/intel_pstate/max_perf_pct
    fi
    ;;
"min")
    if [ -z "$2" ]; then
        log "usage: cpufreqctl mini {get,check,VALUE}"
        help_min
        help_copyright
    elif [ "$2" = "get" ]; then
        cat /sys/devices/system/cpu/intel_pstate/min_perf_pct
    elif [ "$2" = "check" ]; then
        preValue=$(</sys/devices/system/cpu/intel_pstate/min_perf_pct)
        echo 0 > /sys/devices/system/cpu/intel_pstate/min_perf_pct
        postValue=$(</sys/devices/system/cpu/intel_pstate/min_perf_pct)
        echo "${preValue}" > /sys/devices/system/cpu/intel_pstate/min_perf_pct
        echo "${postValue}"
    elif [ "$2" -lt 0 ] || [ "$2" -gt 100 ]; then
        log "usage: cpufreqctl min {get,check,VALUE}"
        err "VALUE must be between 0 and 100"
    else
        echo "$2" > /sys/devices/system/cpu/intel_pstate/min_perf_pct
    fi
    ;;
*)
    err "invalid option"
esac
